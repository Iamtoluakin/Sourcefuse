AWS Infrastructure Automation with Terraform

This project is an example of Infrastructure as Code (IaC) using Terraform. It provisions an ECS cluster, an Application Load Balancer (ALB), and an S3 bucket on Amazon Web Services (AWS).

Prerequisites

Terraform installed.
An AWS account and AWS CLI installed and configured.
Python3 and pip installed for the CLI tool.
Terraform Usage

Initialize the Terraform project:
csharp
Copy code
terraform init
Preview the actions to be performed by Terraform:
Copy code
terraform plan
Apply the actions:
Copy code
terraform apply
AWS CLI Usage

You can interact with the created resources via the AWS CLI. For example, you can list the available ECS clusters:

css
Copy code
aws ecs list-clusters --region <your-region>
Python CLI

This project also includes a Python-based command-line interface (CLI) for interacting with the provisioned resources.

Installation
To install the CLI tool, use pip:

Copy code
pip install .
Usage
After installation, you can use the cli-tool command to interact with your resources. For example:

bash
Copy code
cli-tool list-ecs
This command would list all ECS services in the configured AWS region.

For more details, please refer to the CLI tool's help page:

bash
Copy code
cli-tool --help
Cleaning Up

To remove all resources created by Terraform, you can run:

Copy code
terraform destroy
Be careful with this command as it will delete all the resources managed by Terraform in your AWS account.

Note

Please note that you might incur costs on AWS with these resources. Always remember to clean up after you're done to avoid unnecessary charges.